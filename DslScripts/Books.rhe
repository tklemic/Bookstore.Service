
//All of the concepts named in the assignment have been tested through either creating or updating data (POST and PUT)

Module Bookstore
{
    Entity Book
    {
        //DenyUserEdit; //User gets this message: "It is not allowed to directly modify Bookstore.Book."
        ShortString Code { Unique; Required; }
        ShortString Title { Required;}
        Integer NumberOfPages;
        Reference Author Bookstore.Person;

        ItemFilter ContainsLockMark 'item => item.Title.Contains("curiosity")';
        Lock ContainsLockMark 'Title contains lock mark.';
    }

    Entity Person
    {
        ShortString Name;
        Date DateOfInsertion { DefaultValue 'item => DateTime.Now';} //When user wants to create a new record, Today's date is inserted successfuly by the system.'
        Logging 
        {
            Log Bookstore.Person.Name; //When user does something with the name property, DB trigger activates which saves info about it in Common.Log table.
        }
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;

        Logging { AllProperties; } //Simillar to logging, but it includes all the properties in this entity.
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
        ShortString Code { AutoCode; } //E.G. "string+++" is saved as string001 in DB
        DateTime DateOfCreation { CreationTime; } //System puts the timestamp of the record being created by user.
        DateTime DateOfModified { ModificationTimeOf Bookstore.Topic.Name; } //When user changes the value of name, timestamp is inserted in this property/column.
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Entity Employee
    {
        Deactivatable; //Creates "Active" column with its default value being 1 (True).
        ShortString Name { Required; }
        Decimal VAT { Unique; }
    }

    Entity Manager
    {
        Extends Bookstore.Employee;

        LongString Bonus;
    }
    
    Entity EducationalRecord
    {
        Reference Employee { Detail; }

        Date Date;
        LongString Description;
    }

    Entity Department
    {
        ShortString Code { Unique; }
        LongString Description;
    }

    Entity EmployeeDepartment
    {
        Reference Employee { Detail; }
        Reference Department { Required; }

        UniqueMultiple 'Employee Department';
    }

    Browse BookGrid Bookstore.Book
    {
    Take Code;
    Take Title;
    Take 'Author.Name';
    Take TranslatorName 'Extension_ForeignBook.Translator.Name';
    Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
    }

    SqlQueryable BookInfo <SQL\BookInfo.sql>       
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }
}