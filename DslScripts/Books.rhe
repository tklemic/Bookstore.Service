//All of the concepts named in the assignment have been tested through either creating or updating data (POST and PUT)
Module Bookstore
{
    Entity Book
    {
        //DenyUserEdit; //User gets this message: "It is not allowed to directly modify Bookstore.Book."
        ShortString Code { Unique; Required; }
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;


        //To check the filter: https://localhost:7040/rest/Bookstore/Book/?filters=[{"Filter":"Bookstore.LongBooks"}]
        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';
        //Another way for the ^LongBooks https://localhost:7040/rest/Bookstore/Book/?filters=[{"Filter":"Bookstore.LongBooks2"}]
        ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 500);
            }' ;
        // https://localhost:7040/rest/Bookstore/Book/?filters=[{"Filter":"Bookstore.LongBooks3","Value":"true"}]
        ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                 return filtered;
            }';
        //FilterBy
        FilterBy ComplexSearch '(repository, parameter) => 
            {
                var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    query = query.Where(item => item.Extension_ForeignBook.ID != null);
                Book[] books = query.ToSimple().ToArray();

                if (parameter.MaskTitles == true)
                    foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                        book.Title = book.Title.First() + "***" + book.Title.Last();

                return books;
            }';
                
        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity". Please use "curiosity" instead.';

        ItemFilter ContainsLockMark 'item => item.Title.Contains("curiosity")';
        Lock ContainsLockMark 'Title contains lock mark.';

        ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("T")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';
    }

    Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }
        
        //InvalidData concept
        ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
        InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';
        ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
        InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';  
    }

    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    Parameter LongBooks2{}

    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

    Entity Person
    {
        ShortString Name;
        Date DateOfInsertion { DefaultValue 'item => DateTime.Now';} //When user wants to create a new record, Today's date is inserted successfuly by the system.'
        Logging 
        {
            Log Bookstore.Person.Name; //When user does something with the name property, DB trigger activates which saves info about it in Common.Log table.
        }
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;

        Logging { AllProperties; } //Simillar to logging, but it includes all the properties in this entity.
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
        ShortString Code { AutoCode; } //E.G. "string+++" is saved as string001 in DB
        DateTime DateOfCreation { CreationTime; } //System puts the timestamp of the record being created by user.
        DateTime DateOfModified { ModificationTimeOf Bookstore.Topic.Name; } //When user changes the value of name, timestamp is inserted in this property/column.
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Entity Employee
    {
        Deactivatable; //Creates "Active" column with its default value being 1 (True).
        ShortString Name { Required; }
        Decimal VAT { Unique; }

        //Day 3, ItemFilter assignment: https://localhost:7040/rest/Bookstore/Employee/?filters=[{"Filter":"Bookstore.LargerVAT"}]    
        ItemFilter LargerVAT 'item => item.VAT >= 5';

        //ComposableFilterBy https://localhost:7040/rest/Bookstore/Employee/?filters=[{"Filter":"Bookstore.LargerVAT2"}]  
        ComposableFilterBy LargerVAT2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.VAT >= 5);
            }' ;

        //FilterBy
        FilterBy Search '(repository, parameter) => 
            {
                var query = repository.Bookstore.Employee.Query(item => item.VAT >= parameter.MinimumVAT);
                if (parameter.Active == true)
                    query = query.Where(item => item.Active != null);
                Employee[] employees = query.ToSimple().ToArray();

                if (parameter.MaskNames == true)
                    foreach (var employee in employees.Where(b => !string.IsNullOrEmpty(b.Name)))
                        employee.Name = employee.Name.First() + "***" + employee.Name.Last();

                return employees;
            }';
    }

    Parameter LargerVAT2{}

    Parameter Search
    {
        Integer MinimumVAT;
        Bool Active;
        Bool MaskNames;
    }

    Entity Manager
    {
        Extends Bookstore.Employee;

        LongString Bonus;
    }
    
    Entity EducationalRecord
    {
        Reference Employee { Detail; }

        Date Date;
        LongString Description;
    }

    Entity Department
    {
        ShortString Code { Unique; }
        LongString Description;
    }

    Entity EmployeeDepartment
    {
        Reference Employee { Detail; }
        Reference Department { Required; }

        UniqueMultiple 'Employee Department';
    }

    Browse BookGrid Bookstore.Book
    {
    Take Code;
    Take Title;
    Take 'Author.Name';
    Take TranslatorName 'Extension_ForeignBook.Translator.Name';
    Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
    }

    Browse BookGridTopics Bookstore.Book
    {
    Take Title;
    Take 'Author.Name';
    Take AmountOfTopics 'Extension_BookTopicTotal.AmountOfTopics';
    }

    SqlQueryable BookInfo <SQL\BookInfo.sql>       
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    SqlQueryable BookTopicTotal <SQL\BookTopicTotal.sql> 
    {
        Extends Bookstore.Book;
        Integer AmountOfTopics;

        AutodetectSqlDependencies;
    }

    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

    Entry ScienceFiction
    {
        Value Label 'Science fiction';
        Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
        Value IsFiction 1;
    }

    Entry Biography
    {
        Value Label 'Biography';
        Value Description 'A written narrative of a person''s life.';
        Value IsFiction 0;
    }
    }

    Action Insert5Books
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < 5; i++)
            {
                var newBook = new Bookstore.Book { Code = i + "+++", Title = "New book" };
                repository.Bookstore.Book.Insert(newBook);
            }
        }';
    
    Action InsertManyBooks
        '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.TitlePrefix + " - " + (i + 1);
            var newBook = new Bookstore.Book { Code = i + "++", Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
{
    Integer NumberOfBooks;
    ShortString TitlePrefix;
}
    
    //Zadatak 4. (6. u skripti)
    Action InsertMultipleBooks
        '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            var newBook = new Bookstore.Book { Code = i + "++++", Title = parameter.Title };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
{
    Integer NumberOfBooks;
    ShortString Title;
}

}