//All of the concepts named in the assignment have been tested through either creating or updating data (POST and PUT)
Module Bookstore
{
    Entity Book
    {
        //DenyUserEdit; //User gets this message: "It is not allowed to directly modify Bookstore.Book."
        ShortString Code { Unique; Required; }
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;


        //To check the filter: https://localhost:7040/rest/Bookstore/Book/?filters=[{"Filter":"Bookstore.LongBooks"}]
        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';
        //Another way for the ^LongBooks https://localhost:7040/rest/Bookstore/Book/?filters=[{"Filter":"Bookstore.LongBooks2"}]
        ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 500);
            }' ;
        // https://localhost:7040/rest/Bookstore/Book/?filters=[{"Filter":"Bookstore.LongBooks3","Value":"true"}]
        ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                 return filtered;
            }';
        //FilterBy
        FilterBy ComplexSearch '(repository, parameter) => 
            {
                var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    query = query.Where(item => item.Extension_ForeignBook.ID != null);
                Book[] books = query.ToSimple().ToArray();

                if (parameter.MaskTitles == true)
                    foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                        book.Title = book.Title.First() + "***" + book.Title.Last();

                return books;
            }';
                
        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity". Please use "curiosity" instead.';

        ItemFilter ContainsLockMark 'item => item.Title.Contains("curiosity")';
        Lock ContainsLockMark 'Title contains lock mark.';

        ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("T")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';
    }

    Entity NumberOfReviews
    {
        Extends Bookstore.Book;
        Integer Count;
    }

    Entity Review
    {
        Reference Book { Required; }
        Integer Score { Required; MinValue 1; MaxValue 5; }
        LongString Text;
        DateTime LastModifiedTime;

        SaveMethod
        {
            Initialization DefaultTextFromScore
                '
                    foreach (var item in insertedNew)
                        if (string.IsNullOrEmpty(item.Text) && item.Score != null)
                        {
                            item.Text = item.Score.Value >= 3
                                ? "I like it" : "I don''t like it";
                            item.LastModifiedTime = DateTime.Now; //demonstrated initialization on LastModifiedTime property
                        }
                ';
            
            LoadOldItems
            {
                Take Score;
                Take 'Book.Title';
            }

            OldDataLoaded AppendTextIfScoreChanged
                '
                    var itemsWithModifiedScore = updatedOld
                        .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                        .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null 
                        || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score)).ToList();

                    foreach (var item in itemsWithModifiedScore)
                        item.newValue.Text += string.Format(" (changed from {0} to {1})",
                            item.oldValue.Score,
                            item.newValue.Score);
                ';

            OnSaveUpdate UpdateNumberOfReviews
                '
                var bookIds = insertedNew.Select(review => review.BookID.Value)
                    .Concat(updatedNew.Select(review => review.BookID.Value))
                    .Concat(deletedIds.Select(review => review.BookID.Value))
                    .Distinct().ToList();

                var numberOfReviews = _domRepository.Bookstore.Book.Query(bookIds)
                    .Select(book => new NumberOfReviews
                    {
                        ID = book.ID,
                        Count = _domRepository.Bookstore.Review.Subquery.Where(r => r.BookID == book.ID).Count()
                    })
                    .ToList();

                var oldRecordIds = _domRepository.Bookstore.NumberOfReviews.Query(bookIds).Select(n => n.ID).ToList();
                _domRepository.Bookstore.NumberOfReviews.Insert(numberOfReviews.Where(r => !oldRecordIds.Contains(r.ID)));
                _domRepository.Bookstore.NumberOfReviews.Update(numberOfReviews.Where(r => oldRecordIds.Contains(r.ID)));
                ';

             OnSaveValidate DenyChangeOfLockedTitle
                '
                var itemsWithModifiedScore = updatedOld
                    .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                    .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null
                        || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score))
                    .Where(modified => modified.oldValue.BookTitle.IndexOf("lock", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    .FirstOrDefault();

                if (itemsWithModifiedScore != null)
                    throw new Rhetos.UserException(string.Format(
                        "It is not allowed to modify score ({0} => {1}) for the book \"{2}\" because to contains \"lock\" in the title.",
                        itemsWithModifiedScore.oldValue.Score,
                        itemsWithModifiedScore.newValue.Score,
                        itemsWithModifiedScore.oldValue.BookTitle));
                ';
        }
    }

    Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }
        
        //InvalidData concept
        ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
        InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';
        ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
        InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';  
    }

    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    Parameter LongBooks2{}

    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

    Entity Person
    {
        ShortString Name;
        Date DateOfInsertion { DefaultValue 'item => DateTime.Now';} //When user wants to create a new record, Today's date is inserted successfuly by the system.'
        Logging 
        {
            Log Bookstore.Person.Name; //When user does something with the name property, DB trigger activates which saves info about it in Common.Log table.
        }
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;

        Logging { AllProperties; } //Simillar to logging, but it includes all the properties in this entity.
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
        ShortString Code { AutoCode; } //E.G. "string+++" is saved as string001 in DB
        DateTime DateOfCreation { CreationTime; } //System puts the timestamp of the record being created by user.
        DateTime DateOfModified { ModificationTimeOf Bookstore.Topic.Name; } //When user changes the value of name, timestamp is inserted in this property/column.
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Entity Employee
    {
        Deactivatable; //Creates "Active" column with its default value being 1 (True).
        ShortString Name { Required; }
        Decimal VAT { Unique; }

        //Day 3, ItemFilter assignment: https://localhost:7040/rest/Bookstore/Employee/?filters=[{"Filter":"Bookstore.LargerVAT"}]    
        ItemFilter LargerVAT 'item => item.VAT >= 5';

        //ComposableFilterBy https://localhost:7040/rest/Bookstore/Employee/?filters=[{"Filter":"Bookstore.LargerVAT2"}]  
        ComposableFilterBy LargerVAT2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.VAT >= 5);
            }' ;

        //FilterBy
        FilterBy Search '(repository, parameter) => 
            {
                var query = repository.Bookstore.Employee.Query(item => item.VAT >= parameter.MinimumVAT);
                if (parameter.Active == true)
                    query = query.Where(item => item.Active != null);
                Employee[] employees = query.ToSimple().ToArray();

                if (parameter.MaskNames == true)
                    foreach (var employee in employees.Where(b => !string.IsNullOrEmpty(b.Name)))
                        employee.Name = employee.Name.First() + "***" + employee.Name.Last();

                return employees;
            }';
    }

    Parameter LargerVAT2{}

    Parameter Search
    {
        Integer MinimumVAT;
        Bool Active;
        Bool MaskNames;
    }
   
    Entity Manager
    {
        Extends Bookstore.Employee;

        LongString Bonus;
    }
    
    Entity EducationalRecord
    {
        Reference Employee { Detail; }

        Date Date;
        LongString Description;
    }

    Entity Department
    {
        ShortString Code { Unique; }
        LongString Description;
    }

    Entity EmployeeDepartment
    {
        Reference Employee { Detail; }
        Reference Department { Required; }

        UniqueMultiple 'Employee Department';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
    }

    Browse BookGridTopics Bookstore.Book
    {
        Take Title;
        Take 'Author.Name';
        Take AmountOfTopics 'Extension_BookTopicTotal.AmountOfTopics';
    }

    SqlQueryable ComputeBookInfo <SQL\BookInfo.sql>       
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        ChangesOnLinkedItems Bookstore.Comment.Book;
    }

    Entity BookInfo
    {
        ComputedFrom Bookstore.ComputeBookInfo
        {
            AllProperties;
            KeepSynchronized;
        }
    }

    SqlQueryable BookTopicTotal <SQL\BookTopicTotal.sql> 
    {
        Extends Bookstore.Book;
        Integer AmountOfTopics;

        AutodetectSqlDependencies;
    }

    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

    Entry ScienceFiction
    {
        Value Label 'Science fiction';
        Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
        Value IsFiction 1;
    }

    Entry Biography
    {
        Value Label 'Biography';
        Value Description 'A written narrative of a person''s life.';
        Value IsFiction 0;
    }
    }

    Action Insert5Books
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < 5; i++)
            {
                var newBook = new Bookstore.Book { Code = i + "+++", Title = "New book" };
                repository.Bookstore.Book.Insert(newBook);
            }
        }';
    
    Action InsertManyBooks
        '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.TitlePrefix + " - " + (i + 1);
            var newBook = new Bookstore.Book { Code = i + "++", Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
    {
    Integer NumberOfBooks;
    ShortString TitlePrefix;
    }
    
    //Zadatak 4. (6. u skripti)
    Action InsertMultipleBooks
        '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            var newBook = new Bookstore.Book { Code = i + "++++", Title = parameter.Title };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
    {
    Integer NumberOfBooks;
    ShortString Title;
    }

    //Day 3 SqlView
    SqlView BookAuthor <SQL\BookAuthor.sql>
    {
        AutodetectSqlDependencies;
    }

    Entity Shipment
    {
        ShortString TargetAddress;
        DateTime DeliveryDate;
        DateTime CreatedAt { CreationTime; }

        Is Bookstore.ShipmentEvent 'Creating'
        {
            Implements Bookstore.ShipmentEvent.EffectiveSince "CreatedAt";
            Implements Bookstore.ShipmentEvent.Shipment "ID";
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Preparing;
            //Note: "Implements" can contain custom SQL code, or a reference to hardcoded entry (see ShipmentStatus).
        }
    }
    
    Entity ShipmentItem
    {
        Reference Shipment { Detail; }
        Reference Book;
    }

    Browse ShipmentGrid Bookstore.Shipment
    {
        Take TargetAddress;
        Take DeliveryDate;
        Take CurrentStatus 'Extension_ShipmentCurrentState.Status.Name';
    }
    
    Polymorphic ShipmentEvent
    {
        DateTime EffectiveSince;
        Reference Shipment;
        Reference NewStatus Bookstore.ShipmentStatus;
    }

    Entity ApproveShipment
    {
        DateTime EffectiveSince { CreationTime; }
        Reference Shipment;

        LongString Explanation { Required; }

        Is Bookstore.ShipmentEvent
        {
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Approved;
        }
    }

    Entity DeliveryStarted
    {
        DateTime EffectiveSince { CreationTime; }
        Reference Shipment;

        Is Bookstore.ShipmentEvent
        {            
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.DeliveryInProgress;
        }
    }

    Entity DeliveryFinished
    {
        DateTime EffectiveSince { CreationTime; }
        Reference Shipment;

        Is Bookstore.ShipmentEvent
        {            
            Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Delivered;
        }
    }

    Hardcoded ShipmentStatus
    {
        Entry Preparing;
        Entry Approved;
        Entry DeliveryInProgress;
        Entry Delivered;
    }

    SqlQueryable ComputeShipmentCurrentState <SQL\ComputeShipmentCurrentState.sql>
    {
        Extends Bookstore.Shipment;
        Reference Status Bookstore.ShipmentStatus; // Preparing => Approved => DeliveryInProgress => Delivered.

        // ChangesOnChangedItems Bookstore.ApproveShipment
        //     'Guid[]'
        //     'changedItems => changedItems
        //         .Select(item => item.ShipmentID.Value)
        //         .ToArray()';

        ChangesOnLinkedItems Bookstore.ApproveShipment.Shipment;
        ChangesOnLinkedItems Bookstore.DeliveryStarted.Shipment;
        ChangesOnLinkedItems Bookstore.DeliveryFinished.Shipment;

        AutodetectSqlDependencies;
    }

    Entity ShipmentCurrentState
    {
        ComputedFrom Bookstore.ComputeShipmentCurrentState
        {
            KeepSynchronized;
            AllProperties;
        }
    }   

    // ComputeBookInfo computes some information about the book by using SQL query.
    // The result is persisted (as a cache) in Entity BookInfo, and updated automatically.

    
}

Module DemoRowPermissions1
{
    Entity Division
    {
        ShortString Name;
    }

    Entity Employee1
    {
        ShortString UserName;
        Reference Division;
    }
    Entity Document
    {
        ShortString Title;
        DateTime Created { CreationTime; }
        Reference Division;

        RowPermissions
        {
             Allow WithinDivision 'context =>
                {
                    Guid myDivisionId = context.Repository.DemoRowPermissions1.Employee1.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.Division.ID)
                        .SingleOrDefault();
                    return item => item.Division.ID == myDivisionId;
                }';
        }
    }
}

Module DemoRowPermissions2
{
    AutoInheritRowPermissions;

    Entity Region
    {
        ShortString Name;
    }

    Entity Division
    {
        ShortString Name;
        Reference Region;
    }

    Entity Employee
    {
        ShortString UserName;
        Reference Division;
    }

    Entity RegionSupervisor
    {
        Reference Employee;
        Reference Region;
    }

    Entity Document
    {
        ShortString Title;
        DateTime Created { CreationTime; }
        Reference Division;

        RowPermissions
        {
            Allow WithinDivision 'context =>
                {
                    Guid myDivisionId = context.Repository.DemoRowPermissions2.Employee.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.Division.ID)
                        .SingleOrDefault();
                    return item => item.Division.ID == myDivisionId;
                }';

            AllowRead SupervisedRegions 'context =>
                {
                    List<Guid> myRegionIds = context.Repository
                        .DemoRowPermissions2.RegionSupervisor.Query()
                        .Where(rs => rs.Employee.UserName == context.UserInfo.UserName)
                        .Select(rs => rs.Region.ID)
                        .ToList();

                    if (myRegionIds.Count == 0)
                        return item => false; // Minor optimization.

                    return item => myRegionIds.Contains(item.Division.Region.ID);
                }';

            DenyWrite PreviousYears 'context =>
                {
                    return item => item.Created < new DateTime(DateTime.Today.Year, 1, 1);
                }';
        }
    }

    Browse DocumentBrowse DemoRowPermissions2.Document
    {
        Take 'Title';
        Take 'Division.Name';
    }

    Entity DocumentComment
    {
        Reference Document { Detail; }
        ShortString Comment;
    }

    Entity DocumentApproval
    {
        Extends DemoRowPermissions2.Document;
        Reference ApprovedBy DemoRowPermissions2.Employee;
        ShortString Note;

        RowPermissions
        {
            // This rule is joined with the inherited rules from DemoRowPermissions2.Document.
            DenyWrite ApprovedByCurrentUser 'context =>
                {
                    var myEmployeeId = context.Repository.DemoRowPermissions2.Employee.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.ID)
                        .SingleOrDefault();
                    return item => item.ApprovedBy.ID != myEmployeeId;
                }';
        }
    }

    SqlQueryable DocumentInfo
    "SELECT
        ID,
        Title2 = Title + '_2',
        Division2ID = DivisionID
    FROM
        DemoRowPermissions2.Document"
{
    Extends DemoRowPermissions2.Document;
    ShortString Title2;
    Reference Division2 DemoRowPermissions2.Division
    {
        SamePropertyValue 'Base.Division';

        // Old syntax, before Rhetos v2.11:
        // SamePropertyValue 'Base' DemoRowPermissions2.Document.Division;
    }

    RowPermissions { InheritFromBase; }

    AutodetectSqlDependencies;
}
}

Module RowPermissionsAssignment
{
    Entity Employee
    {
        ShortString UserName;
    }

    Entity Book
    {
        ShortString Title;
        Reference AssignedTo RowPermissionsAssignment.Employee;

        RowPermissions
        {
            AllowRead EveryoneCanRead 'context =>
                {
                   return book => book.AssignedTo.ID != null; 
                }';

            //Or:
            AllowRead EveryoneCanRead2 'context =>
                {
                   return book => true; 
                }';

            //Even better:
            AllowRead EveryoneCanRead3 'context => book => true';

            Allow OwnerCanWrite 'context =>
                {
                    Guid employeeId = context.Repository.RowPermissionsAssignment.Employee.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.ID)
                        .SingleOrDefault();
                    return book => book.AssignedTo.ID == employeeId;
                }';

            //Or:
            //AllowWrite OwnerCanWrite2 'context =>
              //  {
                //    return book => book.AssignedTo.UserName == context.UserInfo.UserName;
                //}';
        }
    }

    Entity Comment
    {
        LongString Text;
        Reference Book { Detail; }

        RowPermissions
        {
            AllowRead EveryoneCanRead 'context =>
                {
                    return comment => comment.Book.AssignedTo.ID != null;
                }';

            Allow OwnerCanWrite 'context =>
                {
                    Guid employeeId = context.Repository.RowPermissionsAssignment.Employee.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.ID)
                        .SingleOrDefault();

                    return comment => comment.Book.AssignedTo.ID == employeeId;
                }';

            //Better:
            InheritFrom RowPermissionsAssignment.Comment.Book;
        }
    }

    //Or:
    AutoInheritRowPermissions;

    
}

Module Demo
{
    Polymorphic MoneyTransaction
    {
        DateTime EventDate;
        Money Amount;
    }

    Entity BorrowMoney
    {
        ShortString FromWhom;
        DateTime EventDate;
        Money Amount;

        Is Demo.MoneyTransaction;
        // The EventDate and Amount are automatically mapped.
    }

    Entity BorrowMoney2
    {
        DateTime EventDate;
        ShortString FromWhom;
        Money Amount;
        Bool Forgotten;

        Is Demo.MoneyTransaction
        {
            Where 'Forgotten = 0'; // SQL snippet, the "Forgotten" column is a "bit".
        }
    }

    Entity LendMoney
    {
        ShortString ToWhom;
        DateTime EventDate;
        Money Amount;

        Is Demo.MoneyTransaction
        {
            Implements Demo.MoneyTransaction.Amount '-Amount';
            // The Amount in the MoneyTranscation related to the LendMoney record will have a negative value.
        }
    }

    Entity TransferMoney
    {
        DateTime EventDate;
        ShortString TransferFrom;
        ShortString TransferTo;
        Money Amount;

        Is Demo.MoneyTransaction; // Implicitly using the 'Amount' value.

        Is Demo.MoneyTransaction 'Subtract'
        {
        Implements Demo.MoneyTransaction.Amount '-Amount';
        }
    }

    Entity LendMoneyAddendum
    {
        Reference LendMoney;
        Money AdditionalAmount;
    }

    Entity LendMoney // Adding new features to the existing entity.
    {
        Is Demo.MoneyTransaction 'TotalAddendum'
        {
            Implements Demo.MoneyTransaction.Amount '(SELECT -SUM(AdditionalAmount) FROM Demo.LendMoneyAddendum)';
            SqlDependsOn Demo.LendMoneyAddendum;
        }
    }

    Entity TransactionComment
    {
        Reference MoneyTransaction;
        LongString Comment;
    }

    Entity LendMoney2
    {
        ShortString ToWhom;
        // When using SqlImplementation, the properties are not automatically inherited from the polymorphic.
        DateTime EventDate;
        Money Amount;

        Is Demo.MoneyTransaction
        {
            SqlImplementation "SELECT lm.ID, lm.EventDate, Amount = -lm.Amount FROM Demo.LendMoney2 lm"
            {
                AutoDetectSqlDependencies;
            }
        }
    }

    Polymorphic SalesItem
    {
        ShortString Code { Required; }
        Integer Price;
        ShortString Description;
    }

    Entity Book
    {
        ShortString Code { Required; }
        Integer Price;
        ShortString Title;
        Reference Author Demo.Person;

        Is Demo.SalesItem
        {
            Implements Demo.SalesItem.Description '(SELECT Title + '' '' + Demo.Person.Name AS Description FROM Demo.Book LEFT JOIN Demo.Person ON Demo.Book.AuthorID = Demo.Person.ID)'; 
            Where 'Price != 0';
        }
    }
    
    Entity Person
    {
        ShortString Name;
    }

}



 